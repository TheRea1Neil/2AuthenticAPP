@using Microsoft.AspNetCore.Identity
model PaginatedList<_2AuthenticAPP.Models.Customer>
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = "Customers";
}

<h2>Customers</h2>

<form asp-action="Customers" method="get">
    <div class="form-group">
        <label for="searchString">Search by name or email:</label>
        <input type="text" class="form-control" name="searchString" value="@ViewData["CurrentFilter"]" />
        <input type="submit" value="Search" class="btn btn-primary" />
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var customer in Model)
        {
            <tr>
                <td>@customer.FirstName</td>
                <td>@customer.LastName</td>
                <td>@customer.Email</td>
                <td>
                    @if (!string.IsNullOrEmpty(customer.Email))
                    {
                        <form asp-action="UpdateUserRole" method="post">
                            <input type="hidden" name="customerId" value="@customer.CustomerId" />
                            <select name="role" onchange="this.form.submit()">
                                <option value="Admin" selected="@(await UserManager.IsInRoleAsync(await UserManager.FindByEmailAsync(customer.Email), "Admin"))">Admin</option>
                                <option value="User" selected="@(await UserManager.IsInRoleAsync(await UserManager.FindByEmailAsync(customer.Email), "User"))">User</option>
                                <option value="Guest" selected="@(await UserManager.IsInRoleAsync(await UserManager.FindByEmailAsync(customer.Email), "Guest"))">Guest</option>
                            </select>
                        </form>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Customers"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Customers"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
